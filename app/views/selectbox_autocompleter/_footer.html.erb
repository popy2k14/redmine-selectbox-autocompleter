<% type = Setting.plugin_selectbox_autocompleter['autocomplete_type'] %>
<%
  if type == 'select2'
%>
<script type="text/javascript">
  (function(){
    // select autocomplete plugin init
    let isInit = false;
    const targetsList = <%= raw generate_target_list_for_js %>.map((target) => `#${target}`);
    const exceptionsList = <%= raw generate_exceptions_list_for_js %>;
    const isAutosearchSetting = <%= raw is_autosearch %>;

    function initSelectboxAutocompleter(mutationRecord) {
      if (!targetsList.length) return;

      $(targetsList.join()).find('select').each(function (_, target) {
        const $selectbox = $(target);

        if (!$selectbox.length || exceptionsList.includes($selectbox.attr('id'))) return;

        const hasSearchField = isAutosearchSetting && $selectbox.find('option').length > 7 ? 0 : -1;

        if (!$selectbox.hasClass('select2-hidden-accessible') && $selectbox.is(':visible')) {
          const isMultiple = !!$selectbox.attr('multiple');

          $selectbox
            .addClass('select-autocomplete')
            .attr('data-multiple', isMultiple)
            .select2({
              multiple: isMultiple,
              tags: isMultiple,
              minimumResultsForSearch: hasSearchField,
            });
        }

        if (!isInit) return;

        const multipleChangeTarget = mutationRecord.find((record) => record.type === 'attributes' && record.attributeName === 'multiple');

        if (multipleChangeTarget && multipleChangeTarget.target.id === $selectbox.attr('id')) {
          const isMultiple = multipleChangeTarget.target.multiple;

          if (isMultiple !== $(multipleChangeTarget.target).data('multiple')) {
            $(multipleChangeTarget.target)
              .data('multiple', isMultiple)
              .select2('destroy')
              .select2({
                multiple: isMultiple,
                tags: isMultiple,
                minimumResultsForSearch: hasSearchField,
              });
          }
        }
      });

      isInit = true;
    }

    const mo = new MutationObserver(initSelectboxAutocompleter);
    mo.observe(document.body, { attributes: true, childList: true, subtree: true });
  })();
</script>
<%
  end
%>
<%
  if type == 'datalist' || type == 'jquery'
%>
<script type="text/javascript">
  (function(){
    // select autocomplete plugin init

    function initSelectboxAutocompleter() {
      <%= raw generate_target_list_for_js %>.forEach(function(target) {selectboxAutocompleter.generateSelectboxAutocompleter(target, '<%= type %>')});
    }

    var mo = new MutationObserver(initSelectboxAutocompleter);
    mo.observe(document.body, { attributes: true, childList: true, subtree: true });
  })();
</script>
<%
  end
%>
